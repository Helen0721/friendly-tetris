import React from 'react';
import './tetrisApp.css';

let handlerDidMount = false;
let nIntervId: number;

//function loadPieces(props: never): [tetrisPieces: boolean[][][], tetrisPieceColors: string[]] {
function loadPieces(): tetrisPiecesOutput{
  const iPiece = [[true, true, true, true]];
  const jPiece = [[true, false, false ],
                  [true, true, true ]];
  const lPiece =  [[ false, false,  true ],
                   [true, true, true ]];
  const oPiece = [[  true,  true ],
                  [  true,  true ]];
  const sPiece = [[ false,  true,  true ],
                  [  true,  true, false ]];
  const tPiece = [[ false,  true, false ],
                  [  true,  true,  true ]];
  const zPiece = [[  true,  true, false ],
                  [ false,  true,  true ]];
  const tetrisPieces = [iPiece, jPiece, lPiece, oPiece,
                  sPiece, tPiece, zPiece];
  const tetrisPieceColors = [ 'red', 'yellow', 'magenta', 'pink',
                  'cyan', 'green', 'orange' ];
  return [tetrisPieces, tetrisPieceColors];
}

function rc_idx(curr_r: number, curr_c: number, cols: number){
  return (curr_r*cols + curr_c);
}

function rotate2dListClockwise(oldPiece: boolean[][]){
  let newPiece: boolean[][] = [];
  for (const col of oldPiece[0]) newPiece.push([]);
  for (let newRow = 0; newRow < newPiece.length; newRow++){
    for (const row of oldPiece) newPiece[newRow].push(false);
  }

  for (let oldRow = 0; oldRow<oldPiece.length; oldRow++) {
    for (let oldCol = 0; oldCol<oldPiece[0].length; oldCol++){
      let [newRow, newCol] = [oldCol, oldPiece.length-oldRow-1];
      newPiece[newRow][newCol] = oldPiece[oldRow][oldCol];
    }
  }
  return newPiece;
}

function getNextPieceIndex(): number{
  return Math.floor(Math.random()*7);
}

function Cell(props: CellProps): JSX.Element {
  const fill = props.value===''? 'white' : props.value;
  return(
    <div className="Cell"
      style = {{backgroundColor: `${fill}`}}> </div>
  );
}

//class Board extends React.Component<{rows: number,cols: number}, {boardState: string[]}>{
class Board extends React.Component<BoardProps, BoardState>{
  piece: boolean[][]|undefined;
  pieceLeftCol: number
  pieceTopRow: number;
  pieceColor: string;
  paused: boolean;
  constructor(props: BoardProps){
    super(props);
    this.state ={
      boardState: new Array<string>(props.rows*props.cols).fill(''),
      piece: undefined,
      pieceLeftCol: -1,
      pieceTopRow: -1,
      pieceColor: '',
      nextPieceIdx: Math.floor(Math.random()*7),
      paused: false,
    };
    this.piece = undefined;
    this.pieceLeftCol = -1;
    this.pieceTopRow = -1;
    this.pieceColor = '';
    this.paused = false;
    
  }

  componentDidMount(): void {
    if (!handlerDidMount){
      this.onKeyPress();
      handlerDidMount = true;
    }
  }

  onKeyPress(): void{
      document.addEventListener('keydown',(e)=>
        {
          if (e.key==='0' || e.key==='1'||e.key==='2'||e.key==='3'||e.key==='4' || e.key==='5' || e.key==='6') {
            if (this.state.piece!==undefined) this.loadNewPiece(this.state.boardState,Number(e.key),false);
            else this.loadNewPiece(this.state.boardState,Number(e.key),true); 
          }
          else if (this.state.piece!==undefined && e.key==='ArrowDown') this.handleMovePiece(false, 1,0);
          else if (this.state.piece!==undefined && this.movePiece(1,0)[0] && e.key==='ArrowLeft') this.handleMovePiece(false,0,-1);
          else if (this.state.piece!==undefined && this.movePiece(1,0)[0] && e.key==='ArrowRight') this.handleMovePiece(false,0,1);
          else if (this.state.piece!==undefined && this.movePiece(1,0)[0] && e.key==='ArrowUp') this.handleRotatePiece();
          else if (this.state.piece!==undefined && e.key===' ') this.handleMovePiece(true,1,0);
          else if (e.key==='s' || e.key==='S') this.takeStep();
          else if (e.key === 'p'|| e.key==='P') {
            if (!this.state.paused)
              nIntervId = setInterval(()=>this.takeStep(),500) as unknown as number;
            else 
              clearInterval(nIntervId);
            this.setState({paused: !this.state.paused})
            console.log(nIntervId);
          };
        }
      )
  }

  clearPrevPiece(boardState: string[]): string[]|undefined {
   // console.log("clearPrevPiece called")
    const board = [...boardState];
    if (board===undefined) return undefined;
    const oldPiece = this.state.piece as boolean[][];

    for (let row = 0; row < oldPiece.length; row++){
      for (let col = 0; col< oldPiece[0].length; col++){
        let idxInBoard = rc_idx(row+this.state.pieceTopRow,col+this.state.pieceLeftCol,this.props.cols);
        if (oldPiece[row][col]){
          //console.log('row',row+topRow, 'col',col+leftCol, 'idx', idxInBoard);
          board[idxInBoard] = '';
        }
      }
    }
    return board;
  }

  loadNewPiece(boardState: string[], nextPieceIndex: number, clear: boolean): void{
    let board;
    const i = nextPieceIndex===-1? getNextPieceIndex(): nextPieceIndex;
    if (clear && this.state.piece!==undefined) {
      board = this.clearPrevPiece(boardState) as string[];
    } else{
      board = boardState.slice() as string[];
    }
    const newPiece: boolean[][]= this.props.tetrisPieces[i];
    const fill = this.props.tetrisPieceColors[i];
    const leftCol = Math.floor(this.props.cols/2) - Math.ceil(newPiece[0].length/2);
    const topRow = 0;

    for (let row = 0; row < newPiece.length; row++){
      for (let col = 0; col< newPiece[0].length; col++){
        let idxInBoard = rc_idx(row+topRow,col+leftCol,this.props.cols);
        if (newPiece[row][col]){
          board[idxInBoard] = fill;
        }
      }
    }
    console.log('this.state.piece',this.state.piece);
    this.setState({boardState: board, piece: newPiece, pieceLeftCol: leftCol, pieceTopRow: topRow, pieceColor: fill});
    this.piece = newPiece;
    console.log('this.piece',this.piece);
  }

  takeStep(){
    if(this.state.piece===undefined) {
      this.loadNewPiece(this.state.boardState,-1, false);
      return;
    }
    const canMoveCurrPiece = this.handleMovePiece(false,1,0);
    if(!canMoveCurrPiece){
      const board = this.clearFullRow();
      this.loadNewPiece(board,-1, false);
      // const nextPieceIdx = Math.floor(Math.random()*(this.props.tetrisPieces.length));
      // this.setState({nextPieceIdx:nextPieceIdx});
    }
  }

  clearFullRow(){
    let row = this.props.rows-1;
    let board = this.state.boardState.slice();
    //const emptyRow = new Array<string>(this.props.cols).fill('');
    const rowIsFull = (row: number) => {
      for (let col = 0; col<this.props.cols;col++) 
        if (this.state.boardState[rc_idx(row,col,this.props.cols)] === '') return false;
      return true;
    };
    while (row>-1){
      if (rowIsFull(row)){
        let startIdx = rc_idx(row,0,this.props.cols);
        board.splice(startIdx,this.props.cols);
        for(let i = 0; i<this.props.cols; i++) board.unshift('');
      }
      row--;
    }
    //console.log('Cleared board:',board);
    return board;
  }

  handleMovePiece(repeat: boolean, drow:number,dcol:number): boolean{
    let [canMove, board, newLeftCol, newTopRow] = this.movePiece(drow,dcol);
    // board = this.clearFullRow();
    if (canMove && repeat){
      this.setState({boardState: board, pieceLeftCol: newLeftCol, pieceTopRow: newTopRow},()=>this.handleMovePiece(repeat,drow,dcol));
      return true;
    }
    else if(canMove) {
      this.setState({boardState: board, pieceLeftCol: newLeftCol, pieceTopRow: newTopRow});
      return true;
    }
    return false;
  }

  handleRotatePiece(){
    const[board,newPiece,newLeftCol,newTopRow] = this.rotatePieceClockwise();
    if (board!==undefined) this.setState({boardState:board, piece: newPiece, pieceLeftCol: newLeftCol, pieceTopRow: newTopRow});
  }

  movePiece(drow: number, dcol: number): [boolean, string[], number, number] {
    if (this.state.piece===undefined) return [false, [], -1, -1];
    const board = this.clearPrevPiece(this.state.boardState) as string[];

    let newLeftCol, newTopRow;
    [newLeftCol, newTopRow]= [this.state.pieceLeftCol+dcol, this.state.pieceTopRow+drow];
    if (!this.moveIsLegal(board, this.state.piece, newLeftCol, newTopRow)) return [false, [], -1, -1];

    //Move is legal we update the board (drawing new piece)
    for (let row = 0; row < this.state.piece.length; row++){
      for (let col = 0; col< this.state.piece[0].length; col++){
        let idxInBoard = rc_idx(row+newTopRow,col+newLeftCol,this.props.cols);
        if (this.state.piece[row][col]) board[idxInBoard] = this.state.pieceColor;
      }
    }
    return [true, board, newLeftCol, newTopRow];
  }

  moveIsLegal(board: string[], piece: boolean[][], leftCol: number, topRow: number): boolean{
    if (topRow + piece.length > this.props.rows) return false;
    if (topRow<0 || leftCol<0) return false;
    for(let row = 0; row<piece.length; row++){
      for (let col = 0; col< piece[0].length; col++){
        let idxInBoard = rc_idx(row+topRow,col+leftCol,this.props.cols);
        if (piece[row][col] && (col+leftCol>=this.props.cols || 
            board[idxInBoard]!=='')) return false;
        //if (piece[row][col] && col+leftCol>=this.props.cols) return false;
      }
    }
    return true;
  }

  rotatePieceClockwise(): [string[]|undefined,boolean[][], number,number]{
    if (this.state.piece===undefined) return[undefined,[],-1,-1];
    const [oldPiece, oldTopRow, oldLeftCol] = [this.state.piece, this.state.pieceTopRow, this.state.pieceLeftCol];
    const centerRow = oldTopRow + Math.floor(oldPiece.length/2);
    const centerCol = oldLeftCol + Math.floor(oldPiece[0].length/2);
    const[newRows, newCols] = [oldPiece[0].length, oldPiece.length];
    const newPiece = rotate2dListClockwise(oldPiece);
    const newTopRow = centerRow - Math.floor(newRows/2);
    const newLeftCol = centerCol - Math.floor(newCols/2);
    
    const board = this.clearPrevPiece(this.state.boardState) as string[];

    if (this.moveIsLegal(board,newPiece,newLeftCol, newTopRow)){
      for (let row = 0; row < newPiece.length; row++){
        for (let col = 0; col< newPiece[0].length; col++){
          let idxInBoard = rc_idx(row+newTopRow,col+newLeftCol,this.props.cols);
          if (newPiece[row][col]) board[idxInBoard] = this.state.pieceColor;
        }
      }
      return [board,newPiece,newLeftCol,newTopRow];
    }
    else return [undefined,[],-1,-1];
  }

  renderBoard(): JSX.Element[]{
    let cells = [];

    for(let r = 0; r < this.props.rows; r++){
      for (let c=0; c<this.props.cols; c++){
        let idx = rc_idx(r,c,this.props.cols);
        let cell = <Cell 
          value= {this.state.boardState[idx]} 
          key = {idx.toString()+this.state.boardState[idx]}
        />
        cells.push(cell);
      }
    }
    return cells;
  }

  render(){
    const status: string = 'Welcome to Tetris';

    return(
      <div> 
        <div className = "App-header"> {status} </div>
        <div className = 'Board'
          style = {{gridTemplateColumns: `repeat(${this.props.cols}, 1.2fr)`, 
                    gridTemplateRows: `repeat(${this.props.rows}, 1fr)`,
                  }}
        >
          {this.renderBoard()}
          {/* {this.renderPiece()} */}
        </div>
      </div>
    )
  }
}


export default class TetrisApp extends React.Component{
    render(){
    const rows = 15;
    const cols = 10;
    const piecesInfo: tetrisPiecesOutput = loadPieces();

    return <div className="App">
        <Board 
          rows = {rows}
          cols = {cols}
          tetrisPieces = {piecesInfo[0]}
          tetrisPieceColors = {piecesInfo[1]}
        />
      </div>
    ;
  }
}